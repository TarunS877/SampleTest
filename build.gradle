plugins {
    id 'java'
}

group 'org.example'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "http://dl.bintray.com/epam/reportportal" }
}

dependencies {
    testCompile group: 'org.testng', name: 'testng', version: '7.0.0'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    annotationProcessor 'org.projectlombok:lombok:1.18.8'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.8'

    compileOnly 'org.projectlombok:lombok:1.18.8'
    compile group: 'org.json', name: 'json', version: '20190722'
    testCompile group: 'io.rest-assured', name: 'rest-assured', version: '4.0.0'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.9.3'
}

test {
    useTestNG()
}

task runTestsParallel(type: Test){
    useTestNG()
            {
                useDefaultListeners = true
                systemProperty 'listener', 'com.epam.reportportal.testng.ReportPortalTestNGListener'
                testLogging {
                    events "passed", "skipped", "failed", "standardOut", "standardError"
                    exceptionFormat = 'full'
                    showStackTraces true
                }
                afterSuite { desc, result ->
                    if (!desc.parent) {
                        def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                        def startItem = '|  ', endItem = '  |'
                        def repeatLength = startItem.length() + output.length() + endItem.length()
                        println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
                    }
                }

                // add a collection to track failedTests
                ext.failedTests = []

                // add a testlistener to all tasks of type Test
                tasks.withType(Test) {
                    afterTest { TestDescriptor descriptor, TestResult result ->
                        if(result.resultType == TestResult.ResultType.FAILURE){

                            failedTests << ["${descriptor.className}::${descriptor.name}\n"]
                        }
                    }
                }
                // print out tracked failed tests when the build has finished
                gradle.buildFinished {
                    if(!failedTests.empty){
                        println "Failed tests for ${project.name}:"
                        println (failedTests)
                        println ""
                    }
                }

            }
    maxHeapSize  = '1G'
}